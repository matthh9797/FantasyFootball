overall_goals <- overall_goals[ , c(1,2,7,3,5,8,4,6)]
# c. average_goals is a function that inputs the overall goals dataframe and returns a dataframe containing the
# goals per game version of overall_goals with home:away ratios for goals scored and conceded
source("code/dataframes/average_goals.R")
average_goals <- average_goals(overall_goals)
# goals scored by each team in each season
source("code/dataframes/overall_goals.R")
overall_goals <- overall_goals(results)
# rearrange the columns of the dataframes
overall_goals <- overall_goals[ , c(1,2,7,3,5,8,4,6)]
head(overall_goals)
head(average_goals)
average_goals_1520 <- filter(average_goals, Season %in% c("2015-16", "2016-17", "2017-18", "2018-19", "2019-20"))
average_goals_1520 <- select(average_goals_1520, 1:3)
# reshape the dataframe to mkae the seasons the column headers
library(reshape2)
average_goals_1520 <- reshape(average_goals_1520, idvar = "Team", v.names = "overall_goal", timevar = "Season", direction = "wide")
dim(average_goals_1520)
average_goals_1520 <- na.omit(average_goals_1520)
head(average_goals_1520)
head(results)
head(results)
library(magrittr)
results <- read.csv("data/results1993-2020/results.csv")
colnames(average_goals_1520) <- c("Team", "Season-4", "Season-3", "Season-2", "Season-1", "Season(y)")
head(average_goals_1520)
average_goals_1520
head(average_goals)
head(results[,1:10])
results <- read.csv("data/results1993-2020/results.csv")
# results 2005 - 2020 (15 seasons)
results <- transform(results, Date = as.Date(Date))
library(dplyr)
results <- filter(results, Date > "2005-08-01")
results$HomeTeam <- droplevels(results$HomeTeam)
results$AwayTeam <- droplevels(results$AwayTeam)
source("code/dataframes/overall_goals.R")
overall_goals <- overall_goals(results)
# rearrange the columns of the dataframes
overall_goals <- overall_goals[ , c(1,2,7,3,5,8,4,6)]
source("code/dataframes/overall_goals.R")
overall_goals <- overall_goals(results)
# rearrange the columns of the dataframes
overall_goals <- overall_goals[ , c(1,2,7,3,5,8,4,6)]
head(overall_goals)
source("code/dataframes/average_goals.R")
average_goals <- average_goals(overall_goals)
head(average_goals_1520)
# filter for the last 5 seasons and select just the overall goals
average_goals_1520 <- filter(average_goals, Season %in% c("2015-16", "2016-17", "2017-18", "2018-19", "2019-20"))
average_goals_1520 <- select(average_goals_1520, 1:3)
# reshape the dataframe to mkae the seasons the column headers
library(reshape2)
average_goals_1520 <- reshape(average_goals_1520, idvar = "Team", v.names = "overall_goal", timevar = "Season", direction = "wide")
average_goals_1520 <- na.omit(average_goals_1520)
colnames(average_goals_1520) <- c("Team", "Season-4", "Season-3", "Season-2", "Season-1", "Season(y)")
Team <- average_goals_1520$Team
average_goals_1520 <- as.matrix(average_goals_1520[,2:6])
rownames(average_goals_1520) <- Team
average_goals_1520
# filter for the last 5 seasons and select just the overall goals
goals_per_season <- filter(average_goals, Season %in% c("2015-16", "2016-17", "2017-18", "2018-19", "2019-20"))
goals_per_season <- select(goals_per_season, 1:3)
# reshape the dataframe to mkae the seasons the column headers
library(reshape2)
goals_per_season <- reshape(goals_per_season, idvar = "Team", v.names = "overall_goal", timevar = "Season", direction = "wide")
goals_per_season <- na.omit(goals_per_season)
colnames(goals_per_season) <- c("Team", "Season-4", "Season-3", "Season-2", "Season-1", "Season(y)")
Team <- goals_per_season$Team
goals_per_season <- as.matrix(goals_per_season[,2:6])
rownames(goals_per_season) <- Team
head(goals_per_season)
?write
write(goals_per_season, file = "data/goals_per_season.csv")
read.csv("data/goals_per_season.csv")
# the 2019/2020 season
results <- read.csv("data/results1993-2020/results.csv")
# results 2005 - 2020 (15 seasons)
results <- transform(results, Date = as.Date(Date))
library(dplyr)
results <- filter(results, Date > "2005-08-01")
results$HomeTeam <- droplevels(results$HomeTeam)
results$AwayTeam <- droplevels(results$AwayTeam)
# goals scored by each team in each season
source("code/dataframes/overall_goals.R")
overall_goals <- overall_goals(results)
# rearrange the columns of the dataframes
overall_goals <- overall_goals[ , c(1,2,7,3,5,8,4,6)]
# c. average_goals is a function that inputs the overall goals dataframe and returns a dataframe containing the
# goals per game version of overall_goals with home:away ratios for goals scored and conceded
source("code/dataframes/average_goals.R")
average_goals <- average_goals(overall_goals)
# d. team_list is a list object containing factor vectors which contain the teams for each Premier League
# season
team_list <- list(
"2005-06" = droplevels(filter(overall_goals, Season == "2005-06")$Team[1:20]),
"2006-07" = droplevels(filter(overall_goals, Season == "2006-07")$Team[1:20]),
"2007-08" = droplevels(filter(overall_goals, Season == "2007-08")$Team[1:20]),
"2008-09" = droplevels(filter(overall_goals, Season == "2008-09")$Team[1:20]),
"2009-10" = droplevels(filter(overall_goals, Season == "2009-10")$Team[1:20]),
"2010-11" = droplevels(filter(overall_goals, Season == "2010-11")$Team[1:20]),
"2011-12" = droplevels(filter(overall_goals, Season == "2011-12")$Team[1:20]),
"2012-13" = droplevels(filter(overall_goals, Season == "2012-13")$Team[1:20]),
"2013-14" = droplevels(filter(overall_goals, Season == "2013-14")$Team[1:20]),
"2014-15" = droplevels(filter(overall_goals, Season == "2014-15")$Team[1:20]),
"2015-16" = droplevels(filter(overall_goals, Season == "2015-16")$Team[1:20]),
"2015-16" = droplevels(filter(overall_goals, Season == "2016-17")$Team[1:20]),
"2017-18" = droplevels(filter(overall_goals, Season == "2017-18")$Team[1:20]),
"2018-19" = droplevels(filter(overall_goals, Season == "2018-19")$Team[1:20]),
"2019-20" = droplevels(filter(overall_goals, Season == "2019-20")$Team[1:20])
)
## a. Fixture List 2020-21 (data source: https://fixturedownload.com/results/epl-2020)
fixtures <- read.csv("data/fixtures/epl-2020-GMTStandardTime.csv")
fixtures <- transform(fixtures, Date = as.Date(Date, format = "%d/%m/%Y"))
## pre-process teams from 2020/2021 to match the format of the results data source
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
fixtures$Home.Team[fixtures$Home.Team == "Man Utd"] <- "Man United"
fixtures$Home.Team[fixtures$Home.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Home.Team[fixtures$Home.Team == "Spurs"] <- "Tottenham"
fixtures$Away.Team[fixtures$Away.Team == "Man Utd"] <- "Man United"
fixtures$Away.Team[fixtures$Away.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Away.Team[fixtures$Away.Team == "Spurs"] <- "Tottenham"
fixtures <- transform(fixtures, Home.Team = as.factor(Home.Team), Away.Team = as.factor(Away.Team))
# add 2020/2021 teams to the team_list
team_list$teams_2021 <- sort(unique(fixtures$Home.Team))
. overall_goals_predict_2021 - currently I have no model to predict this data frame and have used EDA
# to predict the dataframe
source("code/models/model1/model1_goals_predict.R")
overall_goals_predict_2021 <- model1_overallGoals_predict(Teams = team_list$teams_2021)
## PART 2 - PREDICT EXPECTED GOALS IN EACH MATCH
overall_goals_0506 <- filter(overall_goals, Season == "2005-06")
expected_goals_0506_home <- data.frame(Season = "2005-06", HomeTeam = rep(team_list$`2005-06`, each = 20), AwayTeam = rep(team_list$`2005-06`, 20), HomeGoal = 0, AwayGoal = 0)
# need a function that uses row 1 as arguement 1 and row 2 as argument 2
# a. Create a matrix with the expected goals of each team against each other team home and away
# and a sclaed version which makes the results comparable
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
# use min_max method to normalise data
source("code/models/model1/goals_predict.R")
overall_goals_predict_2021 <- model1_overallGoals_predict(Teams = team_list$teams_2021)
overall_goals_0506 <- filter(overall_goals, Season == "2005-06")
expected_goals_0506_home <- data.frame(Season = "2005-06", HomeTeam = rep(team_list$`2005-06`, each = 20), AwayTeam = rep(team_list$`2005-06`, 20), HomeGoal = 0, AwayGoal = 0)
# need a function that uses row 1 as arguement 1 and row 2 as argument 2
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
# use min_max method to normalise data
model2_score_predict("Liverpool", "Tottenham", overall_goals_predict_2021)
# the 2019/2020 season
results <- read.csv("data/results1993-2020/results.csv")
# results 2005 - 2020 (15 seasons)
results <- transform(results, Date = as.Date(Date))
library(dplyr)
results <- filter(results, Date > "2005-08-01")
results$HomeTeam <- droplevels(results$HomeTeam)
results$AwayTeam <- droplevels(results$AwayTeam)
# save(results, file = "data/results.R")
source("code/dataframes/overall_goals.R")
overall_goals <- overall_goals(results)
# rearrange the columns of the dataframes
overall_goals <- overall_goals[ , c(1,2,7,3,5,8,4,6)]
# c. average_goals is a function that inputs the overall goals dataframe and returns a dataframe containing the
# goals per game version of overall_goals with home:away ratios for goals scored and conceded
source("code/dataframes/average_goals.R")
average_goals <- average_goals(overall_goals)
# season
team_list <- list(
"2005-06" = droplevels(filter(overall_goals, Season == "2005-06")$Team[1:20]),
"2006-07" = droplevels(filter(overall_goals, Season == "2006-07")$Team[1:20]),
"2007-08" = droplevels(filter(overall_goals, Season == "2007-08")$Team[1:20]),
"2008-09" = droplevels(filter(overall_goals, Season == "2008-09")$Team[1:20]),
"2009-10" = droplevels(filter(overall_goals, Season == "2009-10")$Team[1:20]),
"2010-11" = droplevels(filter(overall_goals, Season == "2010-11")$Team[1:20]),
"2011-12" = droplevels(filter(overall_goals, Season == "2011-12")$Team[1:20]),
"2012-13" = droplevels(filter(overall_goals, Season == "2012-13")$Team[1:20]),
"2013-14" = droplevels(filter(overall_goals, Season == "2013-14")$Team[1:20]),
"2014-15" = droplevels(filter(overall_goals, Season == "2014-15")$Team[1:20]),
"2015-16" = droplevels(filter(overall_goals, Season == "2015-16")$Team[1:20]),
"2015-16" = droplevels(filter(overall_goals, Season == "2016-17")$Team[1:20]),
"2017-18" = droplevels(filter(overall_goals, Season == "2017-18")$Team[1:20]),
"2018-19" = droplevels(filter(overall_goals, Season == "2018-19")$Team[1:20]),
"2019-20" = droplevels(filter(overall_goals, Season == "2019-20")$Team[1:20])
)
## a. Fixture List 2020-21 (data source: https://fixturedownload.com/results/epl-2020)
fixtures <- read.csv("data/fixtures/epl-2020-GMTStandardTime.csv")
fixtures <- transform(fixtures, Date = as.Date(Date, format = "%d/%m/%Y"))
## pre-process teams from 2020/2021 to match the format of the results data source
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
fixtures$Home.Team[fixtures$Home.Team == "Man Utd"] <- "Man United"
fixtures$Home.Team[fixtures$Home.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Home.Team[fixtures$Home.Team == "Spurs"] <- "Tottenham"
fixtures$Away.Team[fixtures$Away.Team == "Man Utd"] <- "Man United"
fixtures$Away.Team[fixtures$Away.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Away.Team[fixtures$Away.Team == "Spurs"] <- "Tottenham"
fixtures <- transform(fixtures, Home.Team = as.factor(Home.Team), Away.Team = as.factor(Away.Team))
# add 2020/2021 teams to the team_list
team_list$teams_2021 <- sort(unique(fixtures$Home.Team))
# c. overall_goals_predict_2021 - currently I have no model to predict this data frame and have used EDA
# to predict the dataframe
source("code/models/model1/goals_predict.R")
overall_goals_predict_2021 <- model1_overallGoals_predict(Teams = team_list$teams_2021)
## PART 2 - PREDICT EXPECTED GOALS IN EACH MATCH
overall_goals_0506 <- filter(overall_goals, Season == "2005-06")
expected_goals_0506_home <- data.frame(Season = "2005-06", HomeTeam = rep(team_list$`2005-06`, each = 20), AwayTeam = rep(team_list$`2005-06`, 20), HomeGoal = 0, AwayGoal = 0)
# need a function that uses row 1 as arguement 1 and row 2 as argument 2
# and a sclaed version which makes the results comparable
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
# use min_max method to normalise data
# min_max_norm <- function
head(overall_goals_predict_2021)
overall_goals_predict_2021
head(fixtures)
head(overall_goals_predict_2021)
overall_goals_predict_2021
overall_goals_predict_2021$overall_goal[[6]] <- 50
overall_goals_predict_2021
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
# use min_max method to normalise data
# min_max_norm <- function(x) {
#   (x - min(x)) / (max(x) - min(x))
# }
# scaledGoalMatrix <- apply(expectedGoalMatrix, 2, min_max_norm)
scaledGoalMatrix <- scale(expectedGoalMatrix)
rownames(expectedGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rownames(scaledGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rm(homeGoalMatrix, awayGoalMatrix)
expectedGoalMatrix <- t(expectedGoalMatrix)
scaledGoalMatrix <- t(scaledGoalMatrix)
model2_score_predict("Crystal Palace", "Liverpool", overall_goals_predict_2021)
overall_goals_predict_2021
overall_goals_predict_2021$overall_goal[[12]] <- 60
overall_goals_predict_2021$home_goal[[6]] <- (15*(10/7))
overall_goals_predict_2021$away_goal[[6]] <- (20*(10/7))
overall_goals_predict_2021
# and a sclaed version which makes the results comparable
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
# use min_max method to normalise data
# min_max_norm <- function(x) {
#   (x - min(x)) / (max(x) - min(x))
# }
# scaledGoalMatrix <- apply(expectedGoalMatrix, 2, min_max_norm)
scaledGoalMatrix <- scale(expectedGoalMatrix)
rownames(expectedGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rownames(scaledGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rm(homeGoalMatrix, awayGoalMatrix)
expectedGoalMatrix <- t(expectedGoalMatrix)
scaledGoalMatrix <- t(scaledGoalMatrix)
model2_score_predict("Crystal Palace", "Liverpool", overall_goals_predict_2021)
overall_goals_predict_2021
overall_goals_predict_2021$home_goal[[12]] <- 57*(3/5)
overall_goals_predict_2021$away_goal[[12]] <- 45*(3/5)
overall_goals_predict_2021
overall_goals_predict_2021$home_goal[[16]] <- 22*(3/2)
overall_goals_predict_2021$away_goal[[16]] <- 18*(3/2)
# and a sclaed version which makes the results comparable
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
# use min_max method to normalise data
# min_max_norm <- function(x) {
#   (x - min(x)) / (max(x) - min(x))
# }
# scaledGoalMatrix <- apply(expectedGoalMatrix, 2, min_max_norm)
scaledGoalMatrix <- scale(expectedGoalMatrix)
rownames(expectedGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rownames(scaledGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rm(homeGoalMatrix, awayGoalMatrix)
expectedGoalMatrix <- t(expectedGoalMatrix)
scaledGoalMatrix <- t(scaledGoalMatrix)
model2_score_predict("Southampton", "Man City", overall_goals_predict_2021)
overall_goals_predict_2021
model2_score_predict("Everton", "Arsenal", overall_goals_predict_2021)
url <- "https://fixturedownload.com/download/epl-2020-GMTStandardTime.csv"
download.file(url, destfile = "fixtures-2021.csv")
fixtures <- read.csv("data/fixtures-2021.csv")
download.file(url, destfile = "data/fixtures-2021.csv")
fixtures <- read.csv("data/fixtures-2021.csv")
head(fixtures)
results <- read.csv("data/results1993/2020.csv")
results <- read.csv("data/results1993-2020.csv")
head(results)
if (file.exists("data/fixtures-2021.csv")) {
file.remove("data/fixtures-2021.csv")
download.file(url, destfile = "data/fixtures-2021.csv")
}
fixtures <- read.csv("data/fixtures-2021.csv")
fixtures <- transform(fixtures, Date = as.Date(Date, format = "%d/%m/%Y"))
## pre-process teams from 2020/2021 to match the format of the results data source
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
fixtures$Home.Team[fixtures$Home.Team == "Man Utd"] <- "Man United"
fixtures$Home.Team[fixtures$Home.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Home.Team[fixtures$Home.Team == "Spurs"] <- "Tottenham"
fixtures$Away.Team[fixtures$Away.Team == "Man Utd"] <- "Man United"
fixtures$Away.Team[fixtures$Away.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Away.Team[fixtures$Away.Team == "Spurs"] <- "Tottenham"
fixtures <- transform(fixtures, Home.Team = as.factor(Home.Team), Away.Team = as.factor(Away.Team))
# add 2020/2021 teams to the team_list
team_list$teams_2021 <- sort(unique(fixtures$Home.Team))
# goals scored by each team in each season
source("code/dataframes/overall_goals.R")
overall_goals <- overall_goals(results)
# rearrange the columns of the dataframes
overall_goals <- overall_goals[ , c(1,2,7,3,5,8,4,6)]
# c. average_goals is a function that inputs the overall goals dataframe and returns a dataframe containing the
# goals per game version of overall_goals with home:away ratios for goals scored and conceded
source("code/dataframes/average_goals.R")
average_goals <- average_goals(overall_goals)
# the 2019/2020 season
results <- read.csv("data/results1993-2020.csv")
# results 2005 - 2020 (15 seasons)
results <- transform(results, Date = as.Date(Date))
library(dplyr)
results <- filter(results, Date > "2005-08-01")
results$HomeTeam <- droplevels(results$HomeTeam)
results$AwayTeam <- droplevels(results$AwayTeam)
# save(results, file = "data/results.R")
# goals scored by each team in each season
source("code/dataframes/overall_goals.R")
overall_goals <- overall_goals(results)
# rearrange the columns of the dataframes
overall_goals <- overall_goals[ , c(1,2,7,3,5,8,4,6)]
# c. average_goals is a function that inputs the overall goals dataframe and returns a dataframe containing the
# goals per game version of overall_goals with home:away ratios for goals scored and conceded
source("code/dataframes/average_goals.R")
average_goals <- average_goals(overall_goals)
# d. team_list is a list object containing factor vectors which contain the teams for each Premier League
# season
team_list <- list(
"2005-06" = droplevels(filter(overall_goals, Season == "2005-06")$Team[1:20]),
"2006-07" = droplevels(filter(overall_goals, Season == "2006-07")$Team[1:20]),
"2007-08" = droplevels(filter(overall_goals, Season == "2007-08")$Team[1:20]),
"2008-09" = droplevels(filter(overall_goals, Season == "2008-09")$Team[1:20]),
"2009-10" = droplevels(filter(overall_goals, Season == "2009-10")$Team[1:20]),
"2010-11" = droplevels(filter(overall_goals, Season == "2010-11")$Team[1:20]),
"2011-12" = droplevels(filter(overall_goals, Season == "2011-12")$Team[1:20]),
"2012-13" = droplevels(filter(overall_goals, Season == "2012-13")$Team[1:20]),
"2013-14" = droplevels(filter(overall_goals, Season == "2013-14")$Team[1:20]),
"2014-15" = droplevels(filter(overall_goals, Season == "2014-15")$Team[1:20]),
"2015-16" = droplevels(filter(overall_goals, Season == "2015-16")$Team[1:20]),
"2015-16" = droplevels(filter(overall_goals, Season == "2016-17")$Team[1:20]),
"2017-18" = droplevels(filter(overall_goals, Season == "2017-18")$Team[1:20]),
"2018-19" = droplevels(filter(overall_goals, Season == "2018-19")$Team[1:20]),
"2019-20" = droplevels(filter(overall_goals, Season == "2019-20")$Team[1:20])
)
team_list$teams_2021 <- sort(unique(fixtures$Home.Team))
head(fixtures)
head(results)
str(fixtures)
score <- as.character(fixtures$Result)
head(score)
strsplit(score[[1]])
?strsplit
strsplit(score[[1]], " - ")
strsplit(score, " - ")
splt <- strsplit(score, " - ")
head(splt)
head(splt[1])
head(splt[[1]][1])
?lapply
?apply
splt[[1]]
?sapply(splt, function(x) x[1])
sapply(splt, function(x) x[1])
sapply(splt, function(x) x[2])
FTHG <- sapply(splt, function(x) x[1])
FTAG <- sapply(splt, function(x) x[1])
fixtures <- transform(fixtures, FTHG = FTHG, FTAG = FTAG)
head(fixtures)
fixtures <- transform(fixtures, FTHG = as.numeric(FTHG), FTAG = as.numeric(FTAG))
head(fixtures)
FTAG <- sapply(splt, function(x) x[2])
fixtures <- transform(fixtures, FTHG = as.numeric(FTHG), FTAG = as.numeric(FTAG))
head(fixtures)
hg <- as.numeric(FTHG)
ag <- as.numeric(FTAG)
fixtures <- transform(fixtures, FTHG = hg, FTAG = ag)
head(fixtures)
head(overall_goals)
head(results)
source("code/dataframes/overall_goals.R")
head(fixtrues)
head(fixtures)
overall_goals(HomeTeam = fixtures$Home.Team, AwayTeam = fixtures$Away.Team, Season = rep("2020-21", 380), FTHG = fixtures$FTHG, FTAG = fixtures$FTAG)
overall_goals(HomeTeam = fixtures$Home.Team, AwayTeam = fixtures$Away.Team, Season = as.factor(rep("2020-21", 380)), FTHG = fixtures$FTHG, FTAG = fixtures$FTAG)
Season <- rep("2020-21", 380)
source("code/dataframes/overall_goals.R")
overall_goals(HomeTeam = fixtures$Home.Team, AwayTeam = fixtures$Away.Team, Season = Season, FTHG = fixtures$FTHG, FTAG = fixtures$FTAG)
class(Season)
class(fixtures$Home.Team)
df1 <- data.frame(HomeTeam = as.factor(fixtures$Home.Team), AwayTeam = as.factor(fixtures$Away.Team), Season = as.factor(Season),
FTHG = as.numeric(fixtures$FTHG), FTAG = as.numeric(fixtures$FTAG))
head(df1)
str(df1)
library(dplyr)
home <- df1 %>% group_by(Season, HomeTeam) %>% summarise(home_goal = sum(FTHG), away_goal = sum(away_goal))
home <- df1 %>% group_by(Season, HomeTeam) %>% summarise(home_goal = sum(FTHG), away_goal = sum(FTAG))
head(home)
home <- df1 %>% group_by(Season, HomeTeam) %>% summarise(home_goal = sum(FTHG, na.rm = TRUE), away_goal = sum(FTAG, na.rm = TRUE))
head(home)
home <- df1 %>% group_by(Season, HomeTeam) %>% summarise(home_goal = sum(FTHG, na.rm = TRUE), home_concede = sum(FTAG, na.rm = TRUE))
home
away <- df %>% group_by(Season, AwayTeam) %>% summarise(away_goal=sum(FTAG), away_concede=sum(FTHG))
away <- df1 %>% group_by(Season, AwayTeam) %>% summarise(away_goal=sum(FTAG), away_concede=sum(FTHG))
head(away)
away <- df1 %>% group_by(Season, AwayTeam) %>% summarise(away_goal=sum(FTAG, na.rm = TRUE), away_concede=sum(FTHG, na.rm = TRUE))
head(away)
source("code/dataframes/overall_goals.R")
overall_goals(HomeTeam = fixtures$Home.Team, AwayTeam = fixtures$Away.Team, Season = rep("2020-21", 380), FTAG = fixtures$FTAG, FTHG = fixtures$FTHG)
average_goals <- average_goals(overall_goals)
source("code/dataframes/average_goals.R")
overall_goals <- overall_goals(HomeTeam = fixtures$Home.Team, AwayTeam = fixtures$Away.Team, Season = rep("2020-21", 380), FTAG = fixtures$FTAG, FTHG = fixtures$FTHG)
average_goals(overall_goals)
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
# use min_max method to normalise data
# min_max_norm <- function(x) {
#   (x - min(x)) / (max(x) - min(x))
# }
# scaledGoalMatrix <- apply(expectedGoalMatrix, 2, min_max_norm)
scaledGoalMatrix <- scale(expectedGoalMatrix)
rownames(expectedGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rownames(scaledGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rm(homeGoalMatrix, awayGoalMatrix)
expectedGoalMatrix <- t(expectedGoalMatrix)
scaledGoalMatrix <- t(scaledGoalMatrix)
# and a sclaed version which makes the results comparable
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
# use min_max method to normalise data
# min_max_norm <- function(x) {
#   (x - min(x)) / (max(x) - min(x))
# }
# scaledGoalMatrix <- apply(expectedGoalMatrix, 2, min_max_norm)
scaledGoalMatrix <- scale(expectedGoalMatrix)
rownames(expectedGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rownames(scaledGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rm(homeGoalMatrix, awayGoalMatrix)
expectedGoalMatrix <- t(expectedGoalMatrix)
scaledGoalMatrix <- t(scaledGoalMatrix)
source("code/models/model2/model2_score_predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021,
function(HomeTeam) sapply(team_list$teams_2021,
function(AwayTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021,
function(AwayTeam) sapply(team_list$teams_2021,
function(HomeTeam) model2_score_predict(HomeTeam, AwayTeam, overall_goals_predict_2021)[[2]]))
overall_goals_predict_2021 <- overall_goals
head(overall_goals_predict_2021)
model2_score_predict("Liverpool", "Man City", overall_goals_predict_2021)
overall_goals
sumh <- sum(overall_goals$home_goal)
suma <- sum(overall_goals$away_goal)
sumh
suma
head(fixtures)
