str(results)
results <- filter(results, Season %in% c("2016-17", "2017-18", "2019-20"))
head(results)
results %>% group_by(Season, HomeTeam, AwayTeam) %>% summarise(GoalScored = FTHG)
results %>% group_by(HomeTeam, AwayTeam) %>% summarise(GoalScored = sum(FTHG))
results %>% group_by(AwayTeam, HomeTeam) %>% summarise(GoalScored = sum(FTHG))
intersect(team_list$teams_1920,
intersect(team_list$teams_1819, team_list$teams_1718))
Teams_1619 <- intersect(team_list$teams_1920,
intersect(team_list$teams_1819, team_list$teams_1718))
HomeGoals <- results %>% group_by(HomeTeam, AwayTeam) %>% summarise(GoalScored = sum(FTHG))
AwayGoals <- results %>% group_by(AwayTeam, HomeTeam) %>% summarise(GoalScored = sum(FTHG))
HomeGoals <- HomeGoals %>% filter(HomeTeam %in% Teams_1619, AwayTeam %in% Teams_1619)
HomeGoals
AwayGoals <- AwayGoals %>% filter(AwayTeam %in% Teams_1619, AwayTeam %in% Teams_1619)
table(HomeGoals)
str(HomeGoals)
HomeGoals <- transform(HomeGoals, HomeTeam = droplevels(HomeTeam), AwayTeam = droplevels(AwayTeam))
table(HomeGoals)
HomeGoals
# a. results is a dataframe containing all of the resuts from the 2005/2006 premier league season to
# the 2019/2020 season
results <- read.csv("data/results1993-2020/results.csv")
# results 2005 - 2020 (15 seasons)
results <- transform(results, Date = as.Date(Date))
library(dplyr)
results <- filter(results, Date > "2005-08-01")
# save(results, file = "data/results.R")
# b. goalSummary is a dataframe containing a summary of the overall goals scored and conceded by each team
# in the Premier league by season
source("code/summaryGoals.R")
summaryGoals <- summaryGoals(results)
# season
team_list <- list(
"teams_0506" = droplevels(filter(summaryGoals, Season == "2005-06")$Team[1:20]),
"teams_0607" = droplevels(filter(summaryGoals, Season == "2006-07")$Team[1:20]),
"teams_0708" = droplevels(filter(summaryGoals, Season == "2007-08")$Team[1:20]),
"teams_0809" = droplevels(filter(summaryGoals, Season == "2008-09")$Team[1:20]),
"teams_0910" = droplevels(filter(summaryGoals, Season == "2009-10")$Team[1:20]),
"teams_1011" = droplevels(filter(summaryGoals, Season == "2010-11")$Team[1:20]),
"teams_1112" = droplevels(filter(summaryGoals, Season == "2011-12")$Team[1:20]),
"teams_1213" = droplevels(filter(summaryGoals, Season == "2012-13")$Team[1:20]),
"teams_1314" = droplevels(filter(summaryGoals, Season == "2013-14")$Team[1:20]),
"teams_1415" = droplevels(filter(summaryGoals, Season == "2014-15")$Team[1:20]),
"teams_1516" = droplevels(filter(summaryGoals, Season == "2015-16")$Team[1:20]),
"teams_1617" = droplevels(filter(summaryGoals, Season == "2016-17")$Team[1:20]),
"teams_1718" = droplevels(filter(summaryGoals, Season == "2017-18")$Team[1:20]),
"teams_1819" = droplevels(filter(summaryGoals, Season == "2018-19")$Team[1:20]),
"teams_1920" = droplevels(filter(summaryGoals, Season == "2019-20")$Team[1:20])
)
# s
results <- filter(results, Season %in% c("2016-17", "2017-18", "2019-20"))
results %>% group_by(Season, HomeTeam, AwayTeam) %>% summarise(GoalScored = FTHG)
HomeGoals <- results %>% group_by(HomeTeam, AwayTeam) %>% summarise(GoalScored = sum(FTHG))
AwayGoals <- results %>% group_by(AwayTeam, HomeTeam) %>% summarise(GoalScored = sum(FTHG))
Teams_1619 <- intersect(team_list$teams_1920,
intersect(team_list$teams_1819, team_list$teams_1718))
HomeGoals <- HomeGoals %>% filter(HomeTeam %in% Teams_1619, AwayTeam %in% Teams_1619)
AwayGoals <- AwayGoals %>% filter(AwayTeam %in% Teams_1619, AwayTeam %in% Teams_1619)
AwayGoals <- results %>% group_by(AwayTeam, HomeTeam) %>% summarise(GoalScored = sum(FTAG))
AwayGoals <- AwayGoals %>% filter(AwayTeam %in% Teams_1619, AwayTeam %in% Teams_1619)
AwayGoals
16*16
results <- filter(results, Season %in% c("2016-17", "2017-18", "2019-20"))
results %>% group_by(Season, HomeTeam, AwayTeam) %>% summarise(GoalScored = FTHG)
HomeGoals <- results %>% group_by(Season, HomeTeam, AwayTeam) %>% summarise(GoalScored = sum(FTHG))
head(HomeGoals)
AwayGoals <- results %>% group_by(Season, AwayTeam, HomeTeam) %>% summarise(GoalScored = sum(FTAG))
head(AwayGoals)
HomeGoals <- HomeGoals %>% filter(HomeTeam %in% Teams_1619) %>% filter(AwayTeam %in% Teams_1619)
AwayGoals <- AwayGoals %>% filter(AwayTeam %in% Teams_1619, AwayTeam %in% Teams_1619)
AwayGoals <- results %>% group_by(Season, AwayTeam, HomeTeam) %>% summarise(GoalScored = sum(FTAG))
AwayGoals <- AwayGoals %>% filter(AwayTeam %in% Teams_1619) %>% filter(HomeTeam %in% Teams_1619)
HomeGoals <- HomeGoals %>% group_by(HomeTeam, AwayTeam) %>% summarise(GoalScored = sum(FTHG))
HomeGoals <- HomeGoals %>% group_by(HomeTeam, AwayTeam) %>% summarise(GoalScored = sum(GoalScored))
16*15
AwayGoals <- AwayGoals %>% group_by(HomeTeam, AwayTeam) %>% summarise(GoalScored = sum(GoalScored))
head(HomeGoals)
Teams_1619[[1]]
filter(HomeGoals, HomeTeam == "Arsenal") %>% summarise(HomeGoals, mean(GoalScored))
?summarise
HomeGoals %>% group_by(HomeTeam) %>% summarise(mean(GoalScored))
HomeGoals %>% group_by(HomeTeam) %>% summarise(mean = mean(GoalScored))
meanGoals <- HomeGoals %>% group_by(HomeTeam) %>% summarise(mean = mean(GoalScored))
meanGoals$mean[[i]]
meanGoals$mean[[1]]
HomeGoals[1,]
?rbind
data = data.frame()
for (i in 1:16) {
# Create row to add to data
data = c(HomeTeam = Teams_1619[[i]], AwayTeam = Teams_1619[[i]],
GoalScored = meanGoals$mean[[i]])
}
data
data = data.frame()
for (i in 1:16) {
# Create row to add to data
data[i,] = c(HomeTeam = Teams_1619[[i]], AwayTeam = Teams_1619[[i]],
GoalScored = meanGoals$mean[[i]])
}
data
data = data.frame(HomeTeam, AwayTeam, GoalScored)
data = data.frame("HomeTeam", "AwayTeam", "GoalScored")
for (i in 1:16) {
# Create row to add to data
data[i,] = c(Teams_1619[[i]], Teams_1619[[i]], meanGoals$mean[[i]])
}
data
data = data.frame("HomeTeam", "AwayTeam", "GoalScored")
data
# the 2019/2020 season
results <- read.csv("data/results1993-2020/results.csv")
# results 2005 - 2020 (15 seasons)
results <- transform(results, Date = as.Date(Date))
library(dplyr)
results <- filter(results, Date > "2005-08-01")
# save(results, file = "data/results.R")
# b. goalSummary is a dataframe containing a summary of the overall goals scored and conceded by each team
# in the Premier league by season
source("code/summaryGoals.R")
summaryGoals <- summaryGoals(results)
# season
team_list <- list(
"teams_0506" = droplevels(filter(summaryGoals, Season == "2005-06")$Team[1:20]),
"teams_0607" = droplevels(filter(summaryGoals, Season == "2006-07")$Team[1:20]),
"teams_0708" = droplevels(filter(summaryGoals, Season == "2007-08")$Team[1:20]),
"teams_0809" = droplevels(filter(summaryGoals, Season == "2008-09")$Team[1:20]),
"teams_0910" = droplevels(filter(summaryGoals, Season == "2009-10")$Team[1:20]),
"teams_1011" = droplevels(filter(summaryGoals, Season == "2010-11")$Team[1:20]),
"teams_1112" = droplevels(filter(summaryGoals, Season == "2011-12")$Team[1:20]),
"teams_1213" = droplevels(filter(summaryGoals, Season == "2012-13")$Team[1:20]),
"teams_1314" = droplevels(filter(summaryGoals, Season == "2013-14")$Team[1:20]),
"teams_1415" = droplevels(filter(summaryGoals, Season == "2014-15")$Team[1:20]),
"teams_1516" = droplevels(filter(summaryGoals, Season == "2015-16")$Team[1:20]),
"teams_1617" = droplevels(filter(summaryGoals, Season == "2016-17")$Team[1:20]),
"teams_1718" = droplevels(filter(summaryGoals, Season == "2017-18")$Team[1:20]),
"teams_1819" = droplevels(filter(summaryGoals, Season == "2018-19")$Team[1:20]),
"teams_1920" = droplevels(filter(summaryGoals, Season == "2019-20")$Team[1:20])
)
# https://fixturedownload.com/results/epl-2020
fixtures <- read.csv("data/fixtures/epl-2020-GMTStandardTime.csv")
fixtures <- transform(fixtures, Date = as.Date(Date, format = "%d/%m/%Y"))
## b. pre-process teams from 2020/2021 to match the format of the results data source
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
fixtures$Home.Team[fixtures$Home.Team == "Man Utd"] <- "Man United"
fixtures$Home.Team[fixtures$Home.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Home.Team[fixtures$Home.Team == "Spurs"] <- "Tottenham"
fixtures$Away.Team[fixtures$Away.Team == "Man Utd"] <- "Man United"
fixtures$Away.Team[fixtures$Away.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Away.Team[fixtures$Away.Team == "Spurs"] <- "Tottenham"
fixtures <- transform(fixtures, Home.Team = as.factor(Home.Team), Away.Team = as.factor(Away.Team))
# add 2020/2021 teams to the team_list
team_list$teams_2021 <- sort(unique(fixtures$Home.Team))
# scored and conceded by each team
GoalMatrix <- matrix(ncol = 4, nrow = 20)
colnames(GoalMatrix) <- c("HomeGoals", "AwayGoals", "HomeConcede", "AwayConcede")
rownames(GoalMatrix) <- team_list$teams_2021
# based on eda of 5 seasons graphs found in eda section ...
GoalMatrix["Arsenal",] <- c(40, 22, 24, 26)
GoalMatrix["Chelsea",] <- c(35, 40, 16, 40)
GoalMatrix["Crystal Palace",] <- c(15, 20, 20, 30)
GoalMatrix["Everton",] <- c(30, 25, 21, 35)
GoalMatrix["Leicester",] <- c(37, 35, 16, 22)
GoalMatrix["Liverpool",] <- c(54, 34, 16,18)
GoalMatrix["Man City",] <- c(57, 45, 13, 20)
GoalMatrix["Man United",] <- c(44, 25, 15, 18)
GoalMatrix["Southampton",] <- c(22, 30, 36, 25)
GoalMatrix["Tottenham",] <- c(38, 16, 26, 26)
GoalMatrix["West Ham",] <- c(30, 22, 33, 30)
# based on eda of 2 seasons, graphs found in eda section ...
GoalMatrix["Brighton",] <- c(20, 30, 19, 28)
GoalMatrix["Burnley",] <- c(24,20, 25, 30)
GoalMatrix["Newcastle",] <- c(25, 20, 22, 35)
# based on last season
GoalMatrix["Wolves", ] <- c(28,25,20,22)
GoalMatrix["Aston Villa", ] <- c(22, 20, 30, 35)
GoalMatrix["Sheffield United", ] <- c(22, 20, 30, 35)
# guess
GoalMatrix["Fulham",] <- c(22, 18, 30, 35)
GoalMatrix["Leeds",] <- c(25, 22, 30, 35)
GoalMatrix["West Brom",] <- c(22, 18, 30, 35)
# and a sclaed version which makes the results comparable
source("code/predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021, function(HomeTeam) sapply(team_list$teams_2021, function(AwayTeam) predict(HomeTeam, AwayTeam, GoalMatrix)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021, function(AwayTeam) sapply(team_list$teams_2021, function(HomeTeam) predict(HomeTeam, AwayTeam, GoalMatrix)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
scaledGoalMatrix <- scale(expectedGoalMatrix)
rownames(expectedGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rownames(scaledGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rm(homeGoalMatrix, awayGoalMatrix, predict)
expectedGoalMatrix <- t(expectedGoalMatrix)
scaledGoalMatrix <- t(scaledGoalMatrix)
# add expected and scaled goals to the fixtures dataframe
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
# df1 contains the set of home teams for the season and predicted goals
df1 <- data.frame(Date = fixtures$Date, Team = fixtures$Home.Team, Opponent = paste0(fixtures$Away.Team, "@Home"),
Week = fixtures$Round.Number)
df1 <- transform(df1, Team = as.character(Team), Opponent = as.character(Opponent))
EGHome <- rep(0, 380)
SHome <- rep(0, 380)
for (i in 1:380) {
EGHome[i] <- expectedGoalMatrix[[ df1[[i, 2]], df1[[i, 3]] ]]
SHome[i] <- scaledGoalMatrix[[ df1[[i, 2]], df1[[i, 3]] ]]
}
df1 <- transform(df1, expectedGoal = EGHome, scaledGoal = SHome)
# df2 contains the set of away teams and the expected goals for the season
df2 <- data.frame(Date = fixtures$Date, Team = fixtures$Away.Team, Opponent = paste0(fixtures$Home.Team, "@Away"),
Week = fixtures$Round.Number)
df2 <- transform(df2, Team = as.character(Team), Opponent = as.character(Opponent))
EGAway <- rep(0, 380)
SAway <- rep(0, 380)
for (i in 1:380) {
EGAway[i] <- expectedGoalMatrix[[ df2[[i, 2]], df2[[i, 3]] ]]
SAway[i] <- scaledGoalMatrix[[ df2[[i, 2]], df2[[i, 3]] ]]
}
df2 <- transform(df2, expectedGoal = EGAway, scaledGoal = SAway)
goalDF <- rbind(df1, df2)
rm(df1, EGHome, SHome, df2, EGAway, SAway, i)
## Arrange in order of date
goalDF <- arrange(goalDF, Date)
# add expected and scaled goals to the fixtures dataframe
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
# df1 contains the set of home teams for the season and predicted goals
df1 <- data.frame(Date = fixtures$Date, Team = fixtures$Home.Team, Opponent = paste0(fixtures$Away.Team, "@Home"),
Week = fixtures$Round.Number)
df1 <- transform(df1, Team = as.character(Team), Opponent = as.character(Opponent))
ECHome <- rep(0, 380)
SHome <- rep(0, 380)
for (i in 1:380) {
ECHome[i] <- expectedGoalMatrix[[ df1[[i, 2]], df1[[i, 3]] ]]
SHome[i] <- scaledGoalMatrix[[ df1[[i, 2]], df1[[i, 3]] ]]
}
df1 <- transform(df1, expectedGoal = ECHome, scaledGoal = SHome)
# df2 contains the set of away teams and the expected goals for the season
df2 <- data.frame(Date = fixtures$Date, Team = fixtures$Away.Team, Opponent = paste0(fixtures$Home.Team, "@Away"),
Week = fixtures$Round.Number)
df2 <- transform(df2, Team = as.character(Team), Opponent = as.character(Opponent))
EGAway <- rep(0, 380)
SAway <- rep(0, 380)
for (i in 1:380) {
EGAway[i] <- expectedGoalMatrix[[ df2[[i, 2]], df2[[i, 3]] ]]
SAway[i] <- scaledGoalMatrix[[ df2[[i, 2]], df2[[i, 3]] ]]
}
df2 <- transform(df2, expectedGoal = EGAway, scaledGoal = SAway)
goalDF <- rbind(df1, df2)
rm(df1, EGHome, SHome, df2, EGAway, SAway, i)
## Arrange in order of date
goalDF <- arrange(goalDF, Date)
source("code/summaryGoalDF.R")
summaryGoalDF(goalDF, From = 6, to = 11)
summaryGoalDF(goalDF, From = 6, To = 11)
dplyr::filter(goalDF, Team == "Crystal Palace", (Week >= 5) & (Week <= 10))
dplyr::filter(goalDF, Team == "Man United", (Week >= 5) & (Week <= 10))
dplyr::filter(goalDF, Team == "Crystal Palace", (Week >= 6) & (Week <= 11))
dplyr::filter(goalDF, Team == "Aston Villa", (Week >= 6) & (Week <= 11))
# a. results is a dataframe containing all of the resuts from the 2005/2006 premier league season to
# the 2019/2020 season
results <- read.csv("data/results1993-2020/results.csv")
# results 2005 - 2020 (15 seasons)
results <- transform(results, Date = as.Date(Date))
library(dplyr)
results <- filter(results, Date > "2005-08-01")
# save(results, file = "data/results.R")
# b. goalSummary is a dataframe containing a summary of the overall goals scored and conceded by each team
# in the Premier league by season
source("code/summaryGoals.R")
summaryGoals <- summaryGoals(results)
# save(summaryGoals, file = "data/summaryGoals.R")
# c. team_list is a list object containing factor vectors which contain the teams for each Premier League
# season
team_list <- list(
"teams_0506" = droplevels(filter(summaryGoals, Season == "2005-06")$Team[1:20]),
"teams_0607" = droplevels(filter(summaryGoals, Season == "2006-07")$Team[1:20]),
"teams_0708" = droplevels(filter(summaryGoals, Season == "2007-08")$Team[1:20]),
"teams_0809" = droplevels(filter(summaryGoals, Season == "2008-09")$Team[1:20]),
"teams_0910" = droplevels(filter(summaryGoals, Season == "2009-10")$Team[1:20]),
"teams_1011" = droplevels(filter(summaryGoals, Season == "2010-11")$Team[1:20]),
"teams_1112" = droplevels(filter(summaryGoals, Season == "2011-12")$Team[1:20]),
"teams_1213" = droplevels(filter(summaryGoals, Season == "2012-13")$Team[1:20]),
"teams_1314" = droplevels(filter(summaryGoals, Season == "2013-14")$Team[1:20]),
"teams_1415" = droplevels(filter(summaryGoals, Season == "2014-15")$Team[1:20]),
"teams_1516" = droplevels(filter(summaryGoals, Season == "2015-16")$Team[1:20]),
"teams_1617" = droplevels(filter(summaryGoals, Season == "2016-17")$Team[1:20]),
"teams_1718" = droplevels(filter(summaryGoals, Season == "2017-18")$Team[1:20]),
"teams_1819" = droplevels(filter(summaryGoals, Season == "2018-19")$Team[1:20]),
"teams_1920" = droplevels(filter(summaryGoals, Season == "2019-20")$Team[1:20])
)
## a. Add the list of fixtures
# https://fixturedownload.com/results/epl-2020
fixtures <- read.csv("data/fixtures/epl-2020-GMTStandardTime.csv")
fixtures <- transform(fixtures, Date = as.Date(Date, format = "%d/%m/%Y"))
## b. pre-process teams from 2020/2021 to match the format of the results data source
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
fixtures$Home.Team[fixtures$Home.Team == "Man Utd"] <- "Man United"
fixtures$Home.Team[fixtures$Home.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Home.Team[fixtures$Home.Team == "Spurs"] <- "Tottenham"
fixtures$Away.Team[fixtures$Away.Team == "Man Utd"] <- "Man United"
fixtures$Away.Team[fixtures$Away.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Away.Team[fixtures$Away.Team == "Spurs"] <- "Tottenham"
fixtures <- transform(fixtures, Home.Team = as.factor(Home.Team), Away.Team = as.factor(Away.Team))
# add 2020/2021 teams to the team_list
team_list$teams_2021 <- sort(unique(fixtures$Home.Team))
# c. Create goal matrix which is a matrix that predicts the n
# scored and conceded by each team
GoalMatrix <- matrix(ncol = 4, nrow = 20)
colnames(GoalMatrix) <- c("HomeGoals", "AwayGoals", "HomeConcede", "AwayConcede")
rownames(GoalMatrix) <- team_list$teams_2021
# based on eda of 5 seasons graphs found in eda section ...
GoalMatrix["Arsenal",] <- c(40, 22, 24, 26)
GoalMatrix["Chelsea",] <- c(35, 40, 16, 40)
GoalMatrix["Crystal Palace",] <- c(15, 20, 20, 30)
GoalMatrix["Everton",] <- c(30, 25, 21, 35)
GoalMatrix["Leicester",] <- c(37, 35, 16, 22)
GoalMatrix["Liverpool",] <- c(54, 34, 16,18)
GoalMatrix["Man City",] <- c(57, 45, 13, 20)
GoalMatrix["Man United",] <- c(44, 25, 15, 18)
GoalMatrix["Southampton",] <- c(22, 30, 36, 25)
GoalMatrix["Tottenham",] <- c(38, 16, 26, 26)
GoalMatrix["West Ham",] <- c(30, 22, 33, 30)
# based on eda of 2 seasons, graphs found in eda section ...
GoalMatrix["Brighton",] <- c(20, 30, 19, 28)
GoalMatrix["Burnley",] <- c(24,20, 25, 30)
GoalMatrix["Newcastle",] <- c(25, 20, 22, 35)
# based on last season
GoalMatrix["Wolves", ] <- c(28,25,20,22)
GoalMatrix["Aston Villa", ] <- c(22, 20, 30, 35)
GoalMatrix["Sheffield United", ] <- c(22, 20, 30, 35)
# guess
GoalMatrix["Fulham",] <- c(22, 18, 30, 35)
GoalMatrix["Leeds",] <- c(25, 22, 30, 35)
GoalMatrix["West Brom",] <- c(22, 18, 30, 35)
# and a sclaed version which makes the results comparable
source("code/predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021, function(HomeTeam) sapply(team_list$teams_2021, function(AwayTeam) predict(HomeTeam, AwayTeam, GoalMatrix)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021, function(AwayTeam) sapply(team_list$teams_2021, function(HomeTeam) predict(HomeTeam, AwayTeam, GoalMatrix)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
scaledGoalMatrix <- scale(expectedGoalMatrix)
rownames(expectedGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rownames(scaledGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rm(homeGoalMatrix, awayGoalMatrix, predict)
expectedGoalMatrix <- t(expectedGoalMatrix)
scaledGoalMatrix <- t(scaledGoalMatrix)
image(scaledGoalMatrix)
heatmap(scaledGoalMatrix)
# the 2019/2020 season
results <- read.csv("data/results1993-2020/results.csv")
# results 2005 - 2020 (15 seasons)
results <- transform(results, Date = as.Date(Date))
library(dplyr)
results <- filter(results, Date > "2005-08-01")
# save(results, file = "data/results.R")
# b. goalSummary is a dataframe containing a summary of the overall goals scored and conceded by each team
# in the Premier league by season
source("code/summaryGoals.R")
summaryGoals <- summaryGoals(results)
# save(summaryGoals, file = "data/summaryGoals.R")
# c. team_list is a list object containing factor vectors which contain the teams for each Premier League
# season
team_list <- list(
"teams_0506" = droplevels(filter(summaryGoals, Season == "2005-06")$Team[1:20]),
"teams_0607" = droplevels(filter(summaryGoals, Season == "2006-07")$Team[1:20]),
"teams_0708" = droplevels(filter(summaryGoals, Season == "2007-08")$Team[1:20]),
"teams_0809" = droplevels(filter(summaryGoals, Season == "2008-09")$Team[1:20]),
"teams_0910" = droplevels(filter(summaryGoals, Season == "2009-10")$Team[1:20]),
"teams_1011" = droplevels(filter(summaryGoals, Season == "2010-11")$Team[1:20]),
"teams_1112" = droplevels(filter(summaryGoals, Season == "2011-12")$Team[1:20]),
"teams_1213" = droplevels(filter(summaryGoals, Season == "2012-13")$Team[1:20]),
"teams_1314" = droplevels(filter(summaryGoals, Season == "2013-14")$Team[1:20]),
"teams_1415" = droplevels(filter(summaryGoals, Season == "2014-15")$Team[1:20]),
"teams_1516" = droplevels(filter(summaryGoals, Season == "2015-16")$Team[1:20]),
"teams_1617" = droplevels(filter(summaryGoals, Season == "2016-17")$Team[1:20]),
"teams_1718" = droplevels(filter(summaryGoals, Season == "2017-18")$Team[1:20]),
"teams_1819" = droplevels(filter(summaryGoals, Season == "2018-19")$Team[1:20]),
"teams_1920" = droplevels(filter(summaryGoals, Season == "2019-20")$Team[1:20])
)
# https://fixturedownload.com/results/epl-2020
fixtures <- read.csv("data/fixtures/epl-2020-GMTStandardTime.csv")
fixtures <- transform(fixtures, Date = as.Date(Date, format = "%d/%m/%Y"))
## b. pre-process teams from 2020/2021 to match the format of the results data source
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
fixtures$Home.Team[fixtures$Home.Team == "Man Utd"] <- "Man United"
fixtures$Home.Team[fixtures$Home.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Home.Team[fixtures$Home.Team == "Spurs"] <- "Tottenham"
fixtures$Away.Team[fixtures$Away.Team == "Man Utd"] <- "Man United"
fixtures$Away.Team[fixtures$Away.Team == "Sheffield Utd"] <- "Sheffield United"
fixtures$Away.Team[fixtures$Away.Team == "Spurs"] <- "Tottenham"
fixtures <- transform(fixtures, Home.Team = as.factor(Home.Team), Away.Team = as.factor(Away.Team))
# add 2020/2021 teams to the team_list
team_list$teams_2021 <- sort(unique(fixtures$Home.Team))
# c. Create goal matrix which is a matrix th
# scored and conceded by each team
GoalMatrix <- matrix(ncol = 4, nrow = 20)
colnames(GoalMatrix) <- c("HomeGoals", "AwayGoals", "HomeConcede", "AwayConcede")
rownames(GoalMatrix) <- team_list$teams_2021
# based on eda of 5 seasons graphs found in eda section ...
GoalMatrix["Arsenal",] <- c(40, 22, 24, 26)
GoalMatrix["Chelsea",] <- c(35, 40, 16, 40)
GoalMatrix["Crystal Palace",] <- c(15, 20, 20, 30)
GoalMatrix["Everton",] <- c(30, 25, 21, 35)
GoalMatrix["Leicester",] <- c(37, 35, 16, 22)
GoalMatrix["Liverpool",] <- c(54, 34, 16,18)
GoalMatrix["Man City",] <- c(57, 45, 13, 20)
GoalMatrix["Man United",] <- c(44, 25, 15, 18)
GoalMatrix["Southampton",] <- c(22, 30, 36, 25)
GoalMatrix["Tottenham",] <- c(38, 16, 26, 26)
GoalMatrix["West Ham",] <- c(30, 22, 33, 30)
# based on eda of 2 seasons, graphs found in eda section ...
GoalMatrix["Brighton",] <- c(20, 30, 19, 28)
GoalMatrix["Burnley",] <- c(24,20, 25, 30)
GoalMatrix["Newcastle",] <- c(25, 20, 22, 35)
# based on last season
GoalMatrix["Wolves", ] <- c(28,25,20,22)
GoalMatrix["Aston Villa", ] <- c(22, 20, 30, 35)
GoalMatrix["Sheffield United", ] <- c(22, 20, 30, 35)
# guess
GoalMatrix["Fulham",] <- c(22, 18, 30, 35)
GoalMatrix["Leeds",] <- c(25, 22, 30, 35)
GoalMatrix["West Brom",] <- c(22, 18, 30, 35)
# and a sclaed version which makes the results comparable
source("code/predict.R")
homeGoalMatrix <- sapply(team_list$teams_2021, function(HomeTeam) sapply(team_list$teams_2021, function(AwayTeam) predict(HomeTeam, AwayTeam, GoalMatrix)[[1]]))
awayGoalMatrix <- sapply(team_list$teams_2021, function(AwayTeam) sapply(team_list$teams_2021, function(HomeTeam) predict(HomeTeam, AwayTeam, GoalMatrix)[[2]]))
expectedGoalMatrix <- rbind(homeGoalMatrix, awayGoalMatrix)
colnames(expectedGoalMatrix) <- team_list$teams_2021
scaledGoalMatrix <- scale(expectedGoalMatrix)
rownames(expectedGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rownames(scaledGoalMatrix) <- c(sapply(team_list$teams_2021, function(x) paste0(x, "@Home")), sapply(team_list$teams_2021, function(x) paste0(x, "@Away")))
rm(homeGoalMatrix, awayGoalMatrix, predict)
expectedGoalMatrix <- t(expectedGoalMatrix)
scaledGoalMatrix <- t(scaledGoalMatrix)
# add expected and scaled goals to the fixtures dataframe
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
# df1 contains the set of home teams for the season and predicted goals
df1 <- data.frame(Date = fixtures$Date, Team = fixtures$Home.Team, Opponent = paste0(fixtures$Away.Team, "@Home"),
Week = fixtures$Round.Number)
df1 <- transform(df1, Team = as.character(Team), Opponent = as.character(Opponent))
EGHome <- rep(0, 380)
SHome <- rep(0, 380)
for (i in 1:380) {
EGHome[i] <- expectedGoalMatrix[[ df1[[i, 2]], df1[[i, 3]] ]]
SHome[i] <- scaledGoalMatrix[[ df1[[i, 2]], df1[[i, 3]] ]]
}
df1 <- transform(df1, expectedGoal = EGHome, scaledGoal = SHome)
# df2 contains the set of away teams and the expected goals for the season
df2 <- data.frame(Date = fixtures$Date, Team = fixtures$Away.Team, Opponent = paste0(fixtures$Home.Team, "@Away"),
Week = fixtures$Round.Number)
df2 <- transform(df2, Team = as.character(Team), Opponent = as.character(Opponent))
EGAway <- rep(0, 380)
SAway <- rep(0, 380)
for (i in 1:380) {
EGAway[i] <- expectedGoalMatrix[[ df2[[i, 2]], df2[[i, 3]] ]]
SAway[i] <- scaledGoalMatrix[[ df2[[i, 2]], df2[[i, 3]] ]]
}
df2 <- transform(df2, expectedGoal = EGAway, scaledGoal = SAway)
goalDF <- rbind(df1, df2)
rm(df1, EGHome, SHome, df2, EGAway, SAway, i)
## Arrange in order of date
goalDF <- arrange(goalDF, Date)
# add expected and scaled goals to the fixtures dataframe
fixtures <- transform(fixtures, Home.Team = as.character(Home.Team), Away.Team = as.character(Away.Team))
# df1 contains the set of home teams for the season and predicted goals
df1 <- data.frame(Date = fixtures$Date, Team = fixtures$Home.Team, Opponent = paste0(fixtures$Away.Team, "@Home"),
Week = fixtures$Round.Number)
df1 <- transform(df1, Team = as.character(Team), Opponent = as.character(Opponent))
ECHome <- rep(0, 380)
SHome <- rep(0, 380)
for (i in 1:380) {
ECHome[i] <- expectedGoalMatrix[[ df1[[i, 2]], df1[[i, 3]] ]]
SHome[i] <- scaledGoalMatrix[[ df1[[i, 2]], df1[[i, 3]] ]]
}
df1 <- transform(df1, expectedGoal = ECHome, scaledGoal = SHome)
# df2 contains the set of away teams and the expected goals for the season
df2 <- data.frame(Date = fixtures$Date, Team = fixtures$Away.Team, Opponent = paste0(fixtures$Home.Team, "@Away"),
Week = fixtures$Round.Number)
df2 <- transform(df2, Team = as.character(Team), Opponent = as.character(Opponent))
EGAway <- rep(0, 380)
SAway <- rep(0, 380)
for (i in 1:380) {
EGAway[i] <- expectedGoalMatrix[[ df2[[i, 2]], df2[[i, 3]] ]]
SAway[i] <- scaledGoalMatrix[[ df2[[i, 2]], df2[[i, 3]] ]]
}
df2 <- transform(df2, expectedGoal = EGAway, scaledGoal = SAway)
goalDF <- rbind(df1, df2)
rm(df1, EGHome, SHome, df2, EGAway, SAway, i)
## Arrange in order of date
goalDF <- arrange(goalDF, Date)
summaryGoalDF(goalDF, From = 7, To = 13)
source("code/summaryGoalDF.R")
summaryGoalDF(goalDF, From = 7, To = 13)
dplyr::filter(goalDF, Team == "Newcastle", (Week >= 7) & (Week <= 13))
dplyr::filter(goalDF, Team == "Crystal Palace", (Week >= 7) & (Week <= 13))
summaryGoalDF(goalDF, From = 8, To = 14)
dplyr::filter(goalDF, Team == "Crystal Palace", (Week >= 8) & (Week <= 14))
dplyr::filter(goalDF, Team == "Newcastle", (Week >= 8) & (Week <= 14))
dplyr::filter(goalDF, Team == "Newcastle", (Week >= 15) & (Week <= 20))
summaryGoalDF(goalDF, From = 15, To = 20)
dplyr::filter(goalDF, Team == "Arsenal", (Week >= 15) & (Week <= 20))
dplyr::filter(goalDF, Team == "Arsenal", (Week >= 10) & (Week <= 15))
summaryGoalDF(goalDF, From = 10, To = 15)
dplyr::filter(goalDF, Team == "Man City", (Week >= 10) & (Week <= 15))
dplyr::filter(goalDF, Team == "Man City", (Week >= 8) & (Week <= 18))
dplyr::filter(goalDF, Team == "Newcastle", (Week >= 8) & (Week <= 18))
summaryGoalDF(goalDF, From = 8, To = 15)
summaryGoalDF(goalDF, From = 8, To = 12)
dplyr::filter(goalDF, Team == "Newcastle", (Week >= 8) & (Week <= 18))
dplyr::filter(goalDF, Team == "Man CIty", (Week >= 8) & (Week <= 18))
dplyr::filter(goalDF, Team == "Man City", (Week >= 8) & (Week <= 18))
summaryGoalDF(goalDF, From = 15, To = 20)
summaryGoalDF(goalDF, From = 15, To = 22)
